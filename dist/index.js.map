{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/// <reference path=\"./nodejs-global.ts\" />\n\nimport { initializePAL, DOM, PLATFORM, FEATURE, isInitialized } from 'aurelia-pal';\nimport { buildPal } from './nodejs-pal-builder';\nexport { ensurePerformance } from './nodejs-pal-builder';\n\n/**\n* Initializes the PAL with the NodeJS-targeted implementation.\n*/\nexport function initialize(): void {\n  if (isInitialized) {\n    return;\n  }\n\n  let pal = buildPal();\n\n  initializePAL((platform, feature, dom) => {\n    Object.assign(platform, pal.platform);\n    Object.setPrototypeOf(platform, pal.platform.constructor.prototype);\n\n    Object.assign(dom, pal.dom);\n    Object.setPrototypeOf(dom, pal.dom.constructor.prototype);\n\n    Object.assign(feature, pal.feature);\n    Object.setPrototypeOf(feature, pal.feature.constructor.prototype);\n\n    (function (global) {\n      global.console = global.console || {};\n      let con = global.console;\n      let prop;\n      let method;\n      let empty = {};\n      let dummy = function () { };\n      let properties = 'memory'.split(',');\n      let methods = ('assert,clear,count,debug,dir,dirxml,error,exception,group,' +\n        'groupCollapsed,groupEnd,info,log,markTimeline,profile,profiles,profileEnd,' +\n        'show,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn').split(',');\n      while (prop = properties.pop()) if (!con[prop]) con[prop] = empty;\n      while (method = methods.pop()) if (!con[method]) con[method] = dummy;\n    })(platform.global);\n\n    if (platform.global.console && typeof console.log === 'object') {\n      if (typeof console['debug'] === 'undefined') {\n        console['debug'] = this.bind(console['log'], console);\n      }\n      ['log', 'info', 'warn', 'error', 'assert', 'dir', 'clear', 'profile', 'profileEnd'].forEach(function (method) {\n        console[method] = this.bind(console[method], console);\n      }, Function.prototype.call);\n    }\n\n    Object.defineProperty(dom, 'title', {\n      get: function () {\n        return pal.global.document.title;\n      },\n      set: function (value) {\n        pal.global.document.title = value;\n      }\n    });\n\n    Object.defineProperty(dom, 'activeElement', {\n      get: function () {\n        return pal.global.document.activeElement;\n      }\n    });\n\n    Object.defineProperty(platform, 'XMLHttpRequest', {\n      get: function () {\n        return pal.global.XMLHttpRequest;\n      }\n    });\n  });\n}\n\n// snippet copied from https://github.com/lukechilds/browser-env\nfunction createBrowserGlobals() {\n  Object.getOwnPropertyNames(PLATFORM.global)\n    // avoid conflict with nodejs globals\n    .filter(prop => typeof global[prop] === 'undefined')\n    .forEach(prop => global[prop] = PLATFORM.global[prop]);\n}\n\n/**\n * @description initializes and makes variables like 'window' into NodeJS globals\n */\nexport function globalize() {\n  initialize();\n  createBrowserGlobals();\n  global.System = {\n    import(moduleId: string) {\n      try {\n        return Promise.resolve(require(moduleId));\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    }\n  };\n  global.PAL = {\n    DOM, PLATFORM, FEATURE\n  };\n  return global;\n}\n\nexport function reset(window?: Window) {\n  if (window) {\n    window.close();\n  }\n}\n"],"sourceRoot":"../src/"}